name: Ubuntu builds

on:
  push:
    branches:
      - main
      - fix/github-workflow
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-22.04] # for now just run on 22, but soon also use ubuntu-latest for 24
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
#          - os: ubuntu-latest
#            c_compiler: gcc
#            cpp_compiler: g++

    steps:
    - uses: actions/checkout@v4

#    - name: Cache dependencies
#      uses: actions/cache@v3
#      with:
#        path: |
#          /usr/local/lib
#          /usr/local/include
#          ~/.cache
#        key: ${{ runner.os }}-build-cache-${{ hashFiles('**/CMakeLists.txt') }}
#        restore-keys: |
#          ${{ runner.os }}-build-cache-

    - name: Add Eigen3
      run: |
        sudo apt update
        sudo apt install libeigen3-dev

    - uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Add Clarabel
      run: |
        sudo apt install cmake -y
        git clone --recurse-submodules https://github.com/oxfordcontrol/Clarabel.cpp.git
        pwd   #!!
        cd Clarabel.cpp
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Clarabel Debug Info
      run: |
        ls /home/runner/work/torc/torc/Clarabel.cpp/rust_wrapper/target/release
        

    - name: Add Pinocchio
      run: |
        sudo apt install -qqy lsb-release curl
        sudo mkdir -p /etc/apt/keyrings
        curl http://robotpkg.openrobots.org/packages/debian/robotpkg.asc \
          | sudo tee /etc/apt/keyrings/robotpkg.asccd
        echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/robotpkg.asc] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg" \
          | sudo tee /etc/apt/sources.list.d/robotpkg.list
         sudo apt update
         sudo apt install -qqy robotpkg-py3*-pinocchio
        export PATH=/opt/openrobots/bin:$PATH
        export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
        export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
        export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH

    - name: Add CppAD
      run: |
        cd ~
        git clone https://github.com/coin-or/CppAD.git cppad
        cd cppad
        mkdir build && cd build
        cmake ..
        sudo make install

    - name: Add CppADCodeGen
      run: |
        git clone https://github.com/joaoleal/CppADCodeGen.git CppADCodeGen
        cd CppADCodeGen
        mkdir build && cd build
        cmake ..
        sudo make install

    - name: Add MUMPS
      run: |
        sudo apt install gfortran -y
        sudo apt install liblapack-dev -y
        export FC=gfortran
        git clone https://github.com/coin-or-tools/ThirdParty-Mumps.git
        cd ThirdParty-Mumps
        ./get.Mumps
        ./configure
        make
        sudo make install

    - name: Add IPOPT
      run: |
        sudo apt-get install gcc g++ gfortran git patch wget pkg-config liblapack-dev libmetis-dev -y
        git clone https://github.com/coin-or/Ipopt.git
        cd Ipopt
        mkdir build && cd build
        ../configure
        make
        sudo make install

    - name: Add OSQP
      run: |
        git clone https://github.com/osqp/osqp
        cd osqp
        mkdir build
        cd build
        cmake -G "Unix Makefiles" ..
        cmake --build .
        sudo cmake --build . --target install

    - name: OSQP-Eigen
      run: |
        git clone https://github.com/robotology/osqp-eigen.git
        cd osqp-eigen
        mkdir build
        cd build
        cmake ..
        sudo make
        sudo make install

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DCMAKE_PREFIX_PATH=/opt/openrobots
        -DCLARABEL_DIR="/home/runner/work/torc/torc/Clarabel.cpp"
        -DBUILD_WITH_PINOCCHIO=OFF

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Debug Info
      run: |
        echo "Debugging information before cleanup"
        docker ps -a
        docker images